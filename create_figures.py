# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UpdPZFaK87u52_tO4F6MI57tsRodeAx6
"""

#H264DEC
# importing pandas library
import pandas as pd
# import matplotlib library
import matplotlib.pyplot as plt
# creating dataframe
df = pd.DataFrame({
    'Instruction Units': ['IntAlu', 'IntMult', 'IntDiv','SimdAdd','SimdAlu','SimdCmp','MemRead','MemWrite'],
    'Attemps': [6877224, 387804, 25680,2008521,780434,301419,788448,18079117]
})

# plotting graph
ax=df.plot(x="Instruction Units", y="Attemps", kind="bar")
ax.set_title("Number of Attemps to Use the Functional Units when None Available")
# Agregar los números encima de las barras
for i, v in enumerate(df['Attemps']):
    ax.text(i, v, str(v), ha='center', va='bottom')
plt.show()

#H264DEC
df = pd.DataFrame({
    'Instruction Units': ['IntAlu', 'IntMult', 'IntDiv','SimdAdd','SimdAlu','SimdCmp','MemRead','MemWrite'],
    'Utilizations': [179128964, 1822199, 92041,16013496,5266212,1670433,68778220,37504818]
})

# plotting graph
ax=df.plot(x="Instruction Units", y="Utilizations", kind="bar")
ax.set_title("Number of functional Units Uses")
# Agregar los números encima de las barras
for i, v in enumerate(df['Utilizations']):
    ax.text(i, v, str(v), ha='center', va='bottom')
plt.show()

"""Opcion1
As observed in the graph results, there is a high demand for the IntAlu unit, which aligns with the configuration, as two units are available to handle these operations. However, the MemWrite unit shows a significant discrepancy between usage attempts and actual utilization, potentially indicative of congestion in write operations, possibly linked to cache configuration or memory architecture. The configuration of an 8-wide fetch and decode may be causing conflicts when attempting to execute multiple operations in parallel, particularly in memory writes. To address this issue, increasing the size of the L1 data cache or reducing the latency of the L2 cache could be considered. In order to improve performance, adjustments to cache configuration and a reevaluation of fetch and decode width should be explored.

opcion 2
When analyzing the provided graphs regarding the execution of the h264dec program on a CortexA76, critical areas for future optimizations can be identified. The effectiveness of the caches is remarkable, especially in L1i, with a 99.61% hit rate, suggesting that a significant portion of the required instructions are readily available without the need to access main memory. Although the hit rates for L1d and L2 are equally high, the small margin of errors indicates room for improvement. Considering a cache size reconfiguration or reviewing the replacement algorithm could further optimize these rates.

The analysis of the functional units reveals a high demand for the intALU unit, in line with the configuration, as there are two units available. However, there is a significant discrepancy in the MemWrite unit between usage attempts and actual utilization, suggesting congestion in write operations, possibly related to cache configuration or memory architecture. The current fetch and decode configuration with a width of 8 could be generating conflicts when attempting to execute multiple operations in parallel, especially in memory writes. One solution could be to increase the size of the L1 data cache or reduce the latency of the L2 cache. To enhance performance, it is essential to adjust the cache configuration and reassess the fetch and decode width.
"""

#h264DEC
import pandas as pd
import matplotlib.pyplot as plt

# Creando DataFrame
df = pd.DataFrame({
    'Cache': ['l1d', 'l1i', 'L2'],
    'Misses': [3.19, 0.39, 1.76],
    'Hits': [96.81, 99.61, 98.24]
})

# Graficando
ax = df.plot(x="Cache", y=["Hits", "Misses"], kind="bar")
ax.set_ylim([0, 120])  # Ajusta los límites del eje y
for p in ax.patches:
    ax.annotate(f'{p.get_height():.2f}',
                (p.get_x() + p.get_width() / 2., p.get_height() + 1),  # Suma 1 a p.get_height() para mover la anotación arriba
                ha='center',
                va='bottom')  # Cambia 'center' a 'bottom' para alinear la anotación correctamente
plt.show()

#MP3ENC
df = pd.DataFrame({
    'Instruction Units': ['IntAlu', 'IntMult', 'FloatCmp','FloatAdd','FloatMult','MemRead','MemWrite'],
    'Attemps': [327222, 18539, 500372,101693,176287,3747065,2728527]
})

# plotting graph
ax=df.plot(x="Instruction Units", y="Attemps", kind="bar")
ax.set_title("Number of Attemps to Use the Functional Units when None Available")
# Agregar los números encima de las barras
for i, v in enumerate(df['Attemps']):
    ax.text(i, v, str(v), ha='center', va='bottom')
plt.show()

#MP3ENC
df = pd.DataFrame({
    'Instruction Units':['IntAlu', 'IntMult', 'FloatCmp','FloatAdd','FloatMult','MemRead','MemWrite'],
    'Utilizations': [86737733, 647406, 2310911,8547533,7394168,107149804,32408403]
})

# plotting graph
ax=df.plot(x="Instruction Units", y="Utilizations", kind="bar")
ax.set_title("Number of functional Units Uses")
# Agregar los números encima de las barras
for i, v in enumerate(df['Utilizations']):
    ax.text(i, v, str(v), ha='center', va='bottom')
plt.show()

"""The graphs indicate a high demand and utilization of the MemRead and MemWrite units, suggesting a memory-intensive program. It's possible that the running program has a suboptimal memory access pattern or requires frequent and fast memory operations. Based on this, considering increasing the size of the L1 cache or improving the latency of the L2 cache could help alleviate the pressure on these units."""

#MP3ENC
import pandas as pd
import matplotlib.pyplot as plt

# Creando DataFrame
df = pd.DataFrame({
    'Cache': ['l1d', 'l1i', 'L2'],
    'Misses': [0.16, 0.044, 8.66],
    'Hits': [99.84, 99.96, 91.34]
})

# Graficando
ax = df.plot(x="Cache", y=["Hits", "Misses"], kind="bar")
ax.set_ylim([0, 120])  # Ajusta los límites del eje y
for p in ax.patches:
    ax.annotate(f'{p.get_height():.2f}',
                (p.get_x() + p.get_width() / 2., p.get_height() + 1),  # Suma 1 a p.get_height() para mover la anotación arriba
                ha='center',
                va='bottom')  # Cambia 'center' a 'bottom' para alinear la anotación correctamente
plt.show()

#MP3DEC
df = pd.DataFrame({
    'Instruction Units': ['IntAlu','SimdAdd','SimdAlu','SimdMisc','SimdFloatAdd ','MemRead','MemWrite'],
    'Attemps': [5073494, 1459580,4771724,2738475,5952771,3584411,18857938]
})

# plotting graph
ax=df.plot(x="Instruction Units", y="Attemps", kind="bar")
ax.set_title("Number of Attemps to Use the Functional Units when None Available")
# Agregar los números encima de las barras
for i, v in enumerate(df['Attemps']):
    ax.text(i, v, str(v), ha='center', va='bottom')
plt.show()

#MP3DEC
df = pd.DataFrame({
    'Instruction Units': ['IntAlu','SimdAdd','SimdAlu','SimdMisc','SimdFloatAdd ','MemRead','MemWrite'],
    'Utilizations': [95621283, 12196556, 15860484,9791969,19247112,76692391,34221192]
})

# plotting graph
ax=df.plot(x="Instruction Units", y="Utilizations", kind="bar")
ax.set_title("Number of functional Units Uses")
# Agregar los números encima de las barras
for i, v in enumerate(df['Utilizations']):
    ax.text(i, v, str(v), ha='center', va='bottom')
plt.show()

#MP3DEC
import pandas as pd
import matplotlib.pyplot as plt

# Creando DataFrame
df = pd.DataFrame({
    'Cache': ['l1d', 'l1i', 'L2'],
    'Misses': [1.68, 0.015, 0.94],
    'Hits': [98.32, 99.98, 99.06]
})

# Graficando
ax = df.plot(x="Cache", y=["Hits", "Misses"], kind="bar")
ax.set_ylim([0, 120])  # Ajusta los límites del eje y
for p in ax.patches:
    ax.annotate(f'{p.get_height():.2f}',
                (p.get_x() + p.get_width() / 2., p.get_height() + 1),  # Suma 1 a p.get_height() para mover la anotación arriba
                ha='center',
                va='bottom')  # Cambia 'center' a 'bottom' para alinear la anotación correctamente
plt.show()

"""# 3 workloads

"""

# importing pandas library
import pandas as pd
# import matplotlib library
import matplotlib.pyplot as plt
import seaborn as sns  # Import seaborn library for accessing color palettes

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['2', '4', '8'],
    'CPI H264_dec': [0.8066, 0.8056, 0.8055],
    'CPI MP3_enc': [1.0189, 1.0190, 1.0195],
    'CPI MP3_dec': [0.8331, 0.8320, 0.8363]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs num_fu_intALU")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.65, 1.04)
ax.set_ylabel("CPI")
# Mover la leyenda a la esquina superior derecha
ax.legend(loc='lower left')

plt.show()

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['16', '64'],
    'CPI H264_dec': [0.8066, 0.74],
    'CPI MP3_enc': [1.0189, 1.0078],
    'CPI MP3_dec': [0.8331,0.8023]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs Fb_entries")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.72, 1.04)
ax.set_ylabel("CPI")
# Mover la leyenda a la esquina superior derecha
ax.legend(loc='center right')

plt.show()

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['8', '12'],
    'CPI H264_dec': [0.8066, 0.8028],
    'CPI MP3_enc': [1.0189, 1.0062],
    'CPI MP3_dec': [0.8331, 0.8256]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs fetch_width")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.7, 1.04)
ax.set_ylabel("CPI")
# Mover la leyenda a la esquina superior derecha
ax.legend(loc='lower right')

plt.show()

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['2', '4', '6'],
    'CPI H264_dec': [0.8066, 0.8139, 0.8188],
    'CPI MP3_enc': [1.0189, 1.0198, 1.0194],
    'CPI MP3_dec': [0.8331, 0.8349, 0.8363]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs L2_lat")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.7, 1.05)

# Mover la leyenda a la esquina superior derecha
ax.legend(loc='lower right')
ax.set_ylabel("CPI")
plt.show()

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['1MB', '2MB', '4MB'],
    'CPI H264_dec': [0.8066,0.8060, 0.8053],
    'CPI MP3_enc': [1.0189, 1.0188, 1.0188],
    'CPI MP3_dec': [0.8331, 0.7878, 0.833]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs L2_size")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.75, 1.04)

# Mover la leyenda a la esquina superior derecha
ax.legend(loc='center right')
ax.set_ylabel("CPI")
plt.show()

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['2', '4', '6'],
    'CPI H264_dec': [0.8066, 0.860, 0.9495],
    'CPI MP3_enc': [1.0189, 1.2010, 1.3885],
    'CPI MP3_dec': [0.8331, 0.8943, 0.9560]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs L1d_lat")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.7, 1.45)

# Mover la leyenda a la esquina superior derecha
ax.legend(loc='upper left')
ax.set_ylabel("CPI")
plt.show()

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['2', '4', '6'],
    'CPI H264_dec': [0.8066, 1.32, 1.906],
    'CPI MP3_enc': [1.0189, 1.2321, 1.7167],
    'CPI MP3_dec': [0.8331, 1.2368, 1.7781]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs L1i_lat")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.76, 2.0)

# Mover la leyenda a la esquina superior derecha
ax.legend(loc='upper left')
ax.set_ylabel("CPI")
plt.show()

# Define a custom color palette using Seaborn
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

# creating dataframe
df = pd.DataFrame({
    'Size': ['64kB', '128kB', '256kB', '512kB'],
    'CPI H264_dec': [0.8066, 0.8002, 0.7935, 0.7905],
    'CPI MP3_enc': [1.0189, 1.0176, 1.0174, 1.0166],
    'CPI MP3_dec': [0.8331, 0.829, 0.7813, 0.829]
})

ax = df.plot(x="Size", y=['CPI H264_dec', 'CPI MP3_enc', 'CPI MP3_dec'], kind="bar", color=colors)
ax.set_title("Performance vs L1d_size")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.7, 1.05)

# Mover la leyenda a la esquina superior derecha
ax.legend(loc='lower left')
ax.set_ylabel("CPI")
plt.show()

# creating dataframe
df = pd.DataFrame({
    'Size': ['64kB', '128kB', '256kB','512kB'],
    'CPI H264_dec': [0.8066, 0.7967, 0.7945,0.7935],
    'CPI MP3_enc': [1.0189, 1.0196, 1.0197,1.0194],
    'CPI MP3_dec': [0.8331, 0.7879, 0.8327,0.8328] # faltan 2 datos
})
colors = sns.color_palette("Set1")  # You can change "Set2" to any other available Seaborn palette

ax = df.plot(x="Size", y=['CPI H264_dec','CPI MP3_enc','CPI MP3_dec'], kind="bar",color=colors)
ax.set_title("Performance vs L1i_size")

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI H264_dec']):
    ax.text(i, v, str(v), ha='right', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_enc']):
    ax.text(i, v, str(v), ha='center', va='bottom')

# Agregar los números encima de las barras
for i, v in enumerate(df['CPI MP3_dec']):
    ax.text(i, v, str(v), ha='left', va='bottom')

# Set Y-axis limit
ax.set_ylim(0.7, 1.05)

# Mover la leyenda a la esquina superior derecha
ax.legend(loc='lower left')
ax.set_ylabel("CPI")
plt.show()